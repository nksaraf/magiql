/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  PokemonTypeEnum: "Bug" | "Dark" | "Dragon" | "Electric" | "Fairy" | "Fighting" | "Fire" | "Flying" | "Ghost" | "Grass" | "Ground" | "Ice" | "Normal" | "Poison" | "Psychic" | "Rock" | "Steel" | "Water"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Pokemon: { // root type
    attack?: number | null; // Int
    defense?: number | null; // Int
    hp?: number | null; // Int
    id?: string | null; // ID
    name?: string | null; // String
    specialAttack?: number | null; // Int
    specialDefense?: number | null; // Int
    sprites?: NexusGenRootTypes['PokemonSprite'] | null; // PokemonSprite
    types?: Array<NexusGenRootTypes['PokemonType'] | null> | null; // [PokemonType]
  }
  PokemonSprite: { // root type
    animated?: string | null; // String
    large?: string | null; // String
    normal?: string | null; // String
  }
  PokemonType: { // root type
    color?: string | null; // String
    id?: string | null; // ID
    name?: NexusGenEnums['PokemonTypeEnum'] | null; // PokemonTypeEnum
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Pokemon: { // field return type
    attack: number | null; // Int
    defense: number | null; // Int
    hp: number | null; // Int
    id: string | null; // ID
    name: string | null; // String
    specialAttack: number | null; // Int
    specialDefense: number | null; // Int
    sprites: NexusGenRootTypes['PokemonSprite'] | null; // PokemonSprite
    types: Array<NexusGenRootTypes['PokemonType'] | null> | null; // [PokemonType]
  }
  PokemonSprite: { // field return type
    animated: string | null; // String
    large: string | null; // String
    normal: string | null; // String
  }
  PokemonType: { // field return type
    color: string | null; // String
    id: string | null; // ID
    name: NexusGenEnums['PokemonTypeEnum'] | null; // PokemonTypeEnum
  }
  Query: { // field return type
    hello: string | null; // String
    pokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    pokemons: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
  }
}

export interface NexusGenFieldTypeNames {
  Pokemon: { // field return type name
    attack: 'Int'
    defense: 'Int'
    hp: 'Int'
    id: 'ID'
    name: 'String'
    specialAttack: 'Int'
    specialDefense: 'Int'
    sprites: 'PokemonSprite'
    types: 'PokemonType'
  }
  PokemonSprite: { // field return type name
    animated: 'String'
    large: 'String'
    normal: 'String'
  }
  PokemonType: { // field return type name
    color: 'String'
    id: 'ID'
    name: 'PokemonTypeEnum'
  }
  Query: { // field return type name
    hello: 'String'
    pokemon: 'Pokemon'
    pokemons: 'Pokemon'
  }
}

export interface NexusGenArgTypes {
  Query: {
    hello: { // args
      name?: string | null; // String
    }
    pokemon: { // args
      title: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}